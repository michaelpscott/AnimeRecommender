import pandas as pd
import seaborn as sns
from sqlalchemy import false, true; sns.set_theme(color_codes=True)
import matplotlib.pyplot as plt
import numpy as np
from surprise import SVD
from surprise import accuracy
from surprise.model_selection import KFold
from surprise import Dataset
from surprise import Reader
from surprise.model_selection import train_test_split
from collections import defaultdict


pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
pd.set_option('display.width', None)
pd.set_option('display.max_colwidth', None)

def get_top_n(predictions, n=10):

    # Map the predictions to each user.
    top_n = defaultdict(list)
    for uid, iid, r_ui, est, _ in predictions:
        top_n[uid].append((iid, est))

    # Sort the predictions for each user and retrieve the k highest ones.
    for uid, user_ratings in top_n.items():
        user_ratings.sort(key=lambda x: x[1], reverse=True)
        top_n[uid] = user_ratings[:n]

    return top_n


df = pd.read_csv(r'/Users/mscott/Desktop/ML_REC/betterMALfiles/rating_completeSHORT.csv')

df['rating'] = df['rating'].astype(float)

hani = [[211], [368], [753], [827], [828], [830], [1038], [1113], [1339], [1360], [1385], [1386], [1387], [1388], [1389], [1401], [1403], [1404], [1408], [1499], [1510], [1511], [1513], [1595], [1633], [1634], [1635], [1636], [1770], [1779], [1781], [1783], [1784], [1785], [1788], [1895], [1896], [2007], [2134], [2135], [2137], [2140], [2186], [2187], [2188], [2190], [2191], [2194], [2195], [2239], [2240], [2266], [2275], [2276], [2326], [2327], [2328], [2329], [2348], [2351], [2352], [2353], [2357], [2368], [2370], [2371], [2376], [2377], [2378], [2379], [2380], [2394], [2395], [2396], [2411], [2412], [2413], [2430], [2431], [2433], [2434], [2436],
 [2438], [2439], [2440], [2443], [2444], [2445], [2446], [2447], [2505], [2506], [2507], [2531], [2532], [2533], [2539], [2541], [2588], [2590], [2794], [2798], [2821], [2841], [2852], [2858], [2859], [2861], [2862], [2863], [2864], [2866], [2867], [2868], [2869], [2870], [2872], [2873], [2874], [2875], [2894], [2896], [2935], [2936], [2945], [2955], [2956], [2957], [2958], [2960], [2979], [2990], [2991], [3034], [3039], [3046], [3056], [3062], [3063], [3066], [3082], [3093], [3094], [3102], [3105], [3107], [3108], [3171], [3250], [3286], [3324], [3334], [3350], [3377], [3378], [3379], [3380], [3382], [3383], [3384], [3385], [3393], [3403], [3422], 
 [3439], [3442], [3452], [3454], [3478], [3527], [3529], [3530], [3531], [3532], [3537], [3538], [3539], [3540], [3541], [3542], [3543], [3551], [3556], [3557], [3559], [3560], [3562], [3563], [3564], [3565], [3566], [3567], [3578], [3580], [3581], [3582], [3583], [3586], [3587], [3628], [3636], [3639], [3643], [3644], [3645], [3648], [3649], [3679], [3680], [3705], [3706], [3707], [3728], [3729], [3771], [3793], [3795], [3824], [3826], [3833], [3888], [3895], [3896], [3911], [3912], [3916], [3917], [3918], [3919], [3920], [3939], [3940], [3941], [3942], [3944], [3945], [3950], [3951], [3953], [3970], [3980], [3981], [3982], [3983], [3995], [4000], 
 [4009], [4157], [4178], [4304], [4310], [4355], [4356], [4358], [4363], [4364], [4365], [4378], [4400], [4463], [4479], [4480], [4487], [4488], [4489], [4490], [4491], [4492], [4494], [4495], [4496], [4497], [4498], [4502], [4541], [4555], [4557], [4560], [4562], [4590], [4600], [4601], [4603], [4604], [4607], [4608], [4645], [4675], [4692], [4698], [4700], [4701], [4714], [4717], [4729], [4730], [4731], [4732], [4774], [4799], [4802], [4803], [4813], [4817], [4818], [4820], [4821], [4822], [4824], [4825], [4833], [4834], [4840], [4841], [4842], [4848], [4849], [4852], [4867], [4868], [5054], [5097], [5101], [5108], [5160], [5172], [5173], [5190], 
 [5194], [5208], [5209], [5210], [5211], [5212], [5213], [5214], [5281], [5285], [5315], [5316], [5321], [5324], [5347], [5398], [5399], [5401], [5402], [5403], [5423], [5424], [5455], [5464], [5522], [5540], [5541], [5542], [5543], [5545], [5546], [5547], [5548], [5550], [5551], [5552], [5553], [5555], [5556], [5557], [5558], [5559], [5560], [5561], [5563], [5564], [5565], [5567], [5568], [5569], [5570], [5571], [5572], [5573], [5575], [5576], [5586], [5587], [5588], [5590], [5605], [5606], [5607], [5609], [5610], [5611], [5612], [5613], [5614], [5621], [5644], [5645], [5646], [5649], [5651], [5663], [5664], [5665], [5686], [5687], [5743], [5773], 
 [5959], [5993], [6015], [6122], [6133], [6194], [6220], [6235], [6337], [6402], [6422], [6465], [6531], [6622], [6635], [6685], [6686], [6689], [6691], [6692], [6694], [6891], [6892], [6893], [6903], [6986], [7053], [7154], [7178], [7262], [7266], [7268], [7276], [7343], [7456], [7458], [7573], [7581], [7582], [7583], [7611], [7612], [7708], [7712], [7730], [7908], [7914], [7969], [8039], [8110], [8111], [8275], [8289], [8290], [8291], [8292], [8293], [8294], [8471], [8523], [8574], [8651], [8652], [8653], [8654], [8655], [8918], [8987], [9006], [9008], [9009], [9211], [9257], [9270], [9304], [9308], [9309], [9310], [9311], [9312], [9316], [9317], 
 [9322], [9326], [9327], [9328], [9341], [9352], [9375], [9434], [9435], [9442], [9486], [9487], [9503], [9504], [9507], [9588], [9599], [9638], [9718], [9721], [9778], [9849], [9855], [9939], [9968], [9970], [10043], [10256], [10327], [10368], [10380], [10392], [10409], [10419], [10420], [10421], [10424], [10429], [10457], [10458], [10546], [10552], [10553], [10570], [10575], [10668], [10694], [10695], [10697], [10728], [10779], [10851], [10906], 
 [10938], [11065], [11067], [11185], [11321], [11349], [11465], [11467], [11469], [11523], [11745], [11747], [11749], [11815], [11855], [11879], [11969], [11997], [12057], [12059], [12143], [12375], [12551], [12563], [12955], [12957], [12959], [12961], [12995], [12997], [13019], [13051], [13057], [13217], [13219], [13223], [13325], [13379], [13559], [13595], [13643], [13785], [13937], [13959], [14127], [14129], [14207], [14209], [14539], [14657], [14659], [14993], [14995], [15097], [15409], [15541], [15839], [15841], [15843], [15845], [15867], [16187], [16189], [16472], [16474], [16476], [16642], [16644], [16914], [17251], [17491], [17537], [17539], 
 [17541], [17543], [17745], [17747], [17867], [18151], [18455], [18525], [18691], [18693], [18695], [18959], [19051], [19101], [19103], [19283], [19523], [19569], [19629], [19633], [19635], [19857], [19859], [20377], [20589], [20849], [20959], [20995], [21001], [21059], [21069], [21097], [21349], [21363], [21393], [21513], [21597], [21751], [21829], [21925], [22039], [22069], [22081], [22119], [22543], [22655], [22815], [22901], [23033], [23047], [23101], [23171], [23247], [23305], [23475], [23477], [23479], [23519], [23665], [23719], [23761], [24021], [24271], [24273], [24317], [24327], [24357], [24377], [24453], [24641], [24743], [24849], [24911], 
 [24967], [24987], [25055], [25669], [25877], [25923], [26031], [26059], [26081], [27363], [27603], [27747], [27879], [27881], [27909], [28157], [28169], 
 [28309], [28313], [28517], [28519], [28859], [29083], [29085], [29111], [29261], [29573], [29575], [29703], [29705], [29730], [29807], [29808], [29809], [29852], [29915], [29916], [29992], [29994], [30128], [30132], [30242], [30243], [30269], [30454], [30460], [30543], [30614], [30658], [30702], [30741], [30817], [30891], [30898], [31101], [31117], [31189], [31397], [31400], [31401], [31740], [31788], [31789], [31810], [31885], [32063], [32195], [32238], [32239], [32267], [32355], [32405], [32423], [32484], [32518], [32587], [32620], [32667], [32833], [32864], [32872], [32895], [32982], [32997], [33104], [33125], [33138], [33153], [33165], [33231],
 [33291], [33322], [33393], [33505], [33514], [33515], [33750], [33768], [33769], [33960], [33962], [33979], [33981], [33993], [34015], [34030], [34107], [34168], [34246], [34311], [34312], [34361], [34388], [34491], [34492], [34506], [34529], [34530], [34638], [34639], [34740], [34747], [34758], [34759], [34795], [34821], [34937], [34959], [34963], [35028], [35178], [35238], [35343], [35499], [35558], [35573], [35581], [35592], [35726], [35727], [35781], [35827], [35891], [35926], [35931], [35936], [36010], [36033], [36051], [36052], [36109], [36122], [36137], [36225], [36254], [36256], [36461], [36689], [36737], [36755], [36849], [36876], [36889], 
 [36895], [36933], [37088], [37089], [37127], [37222], [37223], [37233], [37287], [37340], [37360], [37405], [37474], [37699], [37771], [37815], [37939], [38030], [38031], [38032], [38033], [38035], [38036], [38039], [38095], [38141], [38252], [38260], [38330], [38453], [38470], [38513], [38620], [38708], [38732], [38760], [38779], [38798], [38817], [38831], [38865], [38866], [38994], [38995], [39058], [39068], [39085], [39299], [39365], [39392], [39466], [39471], [39526], [39530], [39640], [39794], [39803], [40022], [40023], [40048], [40212], [40305], [40337], [40398], [40399], [40471], [40472], [40520], [40521], [40639], [40700], [40801], [40819], 
 [40855], [40922], [40941], [40959], [41200], [41207], [41211], [41212], [41235], [41236], [41260], [41261], [41282], [41370], [41396], [41397], [41512], [41691], [41793], [41794], [41795], [41824], [42031], [42141], [42224], [42324], [42383], [42591], [42592], [42756], [42757], [42848], [43013], [43015], [43466], [43467], [43791], [44192], [44193], [44194], [44211], [48422]]


df = df[~df['anime_id'].isin(hani)]

print(df.shape)

#df = df.sample(frac=.001)
#df = df.head(1000)
#df = df.sort_values('anime_id')
#print(df)
df = df.head(6500000)  #1,000,000 1.1ish | 3,000,000 1.14 | 6,500,00 1.12
#print(df)

reader = Reader(line_format='user item rating', sep=',', rating_scale=(1,10))

data = Dataset.load_from_df(df[['user_id', 'anime_id', 'rating']], reader)#

print(df.shape)
#print(df[:200])

kf = KFold(n_splits=10)

trainset, testset = train_test_split(data, test_size=.10)

algo = SVD()

for trainset, testset in kf.split(data):
    # train and test algorithm.
    algo.fit(trainset)
    predictions = algo.test(testset)

    # Compute and print Root Mean Squared Error
    accuracy.rmse(predictions, verbose=True)

dfPred = pd.DataFrame.from_dict(predictions)
print(dfPred[:100])

top_n = get_top_n(predictions, n=10)

# Print the recommended items for each user
for uid, user_ratings in top_n.items():
    print(uid, [iid for (iid, _) in user_ratings])

